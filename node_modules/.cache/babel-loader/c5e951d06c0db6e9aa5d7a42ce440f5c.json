{"ast":null,"code":"var _jsxFileName = \"/home/rails/parking_app/src/Components/ParkingSlots /ParkingSlots.tsx\";\nimport React, { Component } from 'react';\nimport WithRouter from '../../Router';\nimport { connect } from 'react-redux';\nimport { updateParkingData } from './ParkingSlice';\nimport { Grid, Button, TextField, Box } from '@mui/material';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ParkingSlots extends Component {\n  constructor(props) {\n    super(props);\n    this.carousel = null;\n\n    this.componentDidMount = () => {\n      if (this.props.parkingData && this.props.parkingData.length === 0) {\n        let parkingData = [];\n\n        for (let i = 0; i < Number(this.state.parkingSlots); i++) {\n          parkingData.push({\n            isAvailable: true,\n            carRegistrationNo: '',\n            uniqueNo: i\n          });\n        }\n\n        this.setState({\n          parkingData: parkingData\n        }, () => {});\n      } else {\n        this.setState({\n          parkingData: this.props.parkingData\n        });\n      }\n    };\n\n    this.componentWillUnmount = () => {};\n\n    this.carRegistration = () => {\n      if (this.state.carRegistrationNo.trim().length === 0) {\n        const notify = () => toast(\"Car Registration No is empty\");\n\n        notify();\n        return;\n      }\n\n      let availableParkingArea = this.state.parkingData;\n      let availableRegistrationIndex = availableParkingArea.findIndex(item => item.carRegistrationNo.toLowerCase() === this.state.carRegistrationNo.toLowerCase());\n\n      if (availableRegistrationIndex !== -1) {\n        const notify = () => toast(\"Already Car Registered with this No.\");\n\n        notify();\n        return;\n      }\n\n      let availableIndex = availableParkingArea.findIndex(item => item.isAvailable === true);\n\n      if (availableIndex === -1) {\n        const notify = () => toast(\"Parking is full !\");\n\n        notify();\n        return;\n      }\n\n      let availableIndexes = [];\n      availableParkingArea.map((item, index) => {\n        if (item.isAvailable) {\n          availableIndexes.push(index);\n        }\n      });\n      let randomIndex = Math.floor(Math.random() * availableIndexes.length);\n      availableParkingArea[availableIndexes[randomIndex]].isAvailable = false;\n      availableParkingArea[availableIndexes[randomIndex]].carRegistrationNo = this.state.carRegistrationNo;\n      availableParkingArea[availableIndexes[randomIndex]].time = new Date().getTime();\n      this.setState({\n        parkingData: availableParkingArea,\n        carRegistrationNo: ''\n      }, () => {\n        this.props.updateParkingData(JSON.parse(JSON.stringify(this.state.parkingData)));\n\n        const notify = () => toast(\"Car Registered Succesfully !\");\n\n        notify();\n      });\n    };\n\n    this.handleChangeTextInput = event => {\n      event === null || event === void 0 ? void 0 : event.preventDefault();\n      this.setState({\n        carRegistrationNo: event.target.value\n      });\n    };\n\n    this.onPressSlot = item => {\n      this.props.navigate(`/parkingCharges`, {\n        state: {\n          slotData: item\n        }\n      });\n    };\n\n    this.renderSlotsList = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          style: {\n            padding: \"3%\",\n            gap: \"20px\"\n          },\n          direction: \"row\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          children: this.state.parkingData.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(Box, {\n              style: {\n                lineHeight: \"50px\",\n                textAlign: \"center\",\n                border: \"1px solid black\",\n                backgroundColor: item.isAvailable ? \"grey\" : \"green\",\n                color: \"#000\",\n                margin: \"0px 15px\"\n              },\n              sx: {\n                width: 50,\n                height: 50\n              },\n              \"data-testid\": \"parking-drawing-{item.isAvailable === false ? space-{item.uniqueNo + 1} : registered-{item.uniqueNo + 1}}\",\n              onClick: () => !item.isAvailable && this.onPressSlot(item),\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"parking-drawing-space-number-{item.uniqueNo + 1}\",\n                children: [\"  \", item.uniqueNo + 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 17\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 25\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.state = {\n      parkingSlots: this.props.location.state.parkingSlots,\n      parkingData: [],\n      carRegistrationNo: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      style: {\n        padding: \"3%\",\n        gap: \"40px\"\n      },\n      direction: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      children: [this.renderSlotsList(), /*#__PURE__*/_jsxDEV(TextField, {\n        autoComplete: \"off\",\n        \"data-testid\": \"parking-drawing-registration-input\",\n        placeholder: \"Enter Car Registration No\",\n        value: this.state.carRegistrationNo,\n        onChange: event => this.handleChangeTextInput(event)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        \"data-testid\": \"parking-drawing-add-car-button\",\n        onClick: () => this.carRegistration(),\n        children: \"Car Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n        toastStyle: {\n          backgroundColor: \"#283044\",\n          color: \"#fff\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => ({\n  parkingData: state.parking.parkingData\n});\n\nconst mapDispatchToProps = {\n  updateParkingData: updateParkingData\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(WithRouter(ParkingSlots));\nexport { ParkingSlots };","map":{"version":3,"names":["React","Component","WithRouter","connect","updateParkingData","Grid","Button","TextField","Box","ToastContainer","toast","ParkingSlots","constructor","props","carousel","componentDidMount","parkingData","length","i","Number","state","parkingSlots","push","isAvailable","carRegistrationNo","uniqueNo","setState","componentWillUnmount","carRegistration","trim","notify","availableParkingArea","availableRegistrationIndex","findIndex","item","toLowerCase","availableIndex","availableIndexes","map","index","randomIndex","Math","floor","random","time","Date","getTime","JSON","parse","stringify","handleChangeTextInput","event","preventDefault","target","value","onPressSlot","navigate","slotData","renderSlotsList","padding","gap","lineHeight","textAlign","border","backgroundColor","color","margin","width","height","location","render","mapStateToProps","parking","mapDispatchToProps"],"sources":["/home/rails/parking_app/src/Components/ParkingSlots /ParkingSlots.tsx"],"sourcesContent":["import React, { Component} from 'react';\nimport WithRouter from '../../Router';\nimport { connect } from 'react-redux';\nimport { updateParkingData } from './ParkingSlice';\nimport {Grid , Button, TextField , Box} from '@mui/material'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\n\nexport interface Props {\n    navigate:  any;\n    id: string;\n    parkingData: Array<any>;\n    location: any;\n    updateParkingData: (parkingData: any) => void;\n}\n\ninterface S {\n    parkingSlots: string;\n    parkingData: Array<any>;\n    carRegistrationNo: string;\n\n    \n}\n\ninterface SS {\n    id: any;\n}\n\nclass ParkingSlots extends Component<Props, S, SS> {\n    carousel: any = null;\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            parkingSlots: this.props.location.state.parkingSlots,\n            parkingData: [],\n            carRegistrationNo: '',\n        };\n    };\n\n    componentDidMount = () => {\n        if(this.props.parkingData && this.props.parkingData.length === 0) {\n            let parkingData: Array<any> = [];\n            for(let i = 0; i < Number(this.state.parkingSlots); i++) {\n                parkingData.push({\n                    isAvailable: true,\n                    carRegistrationNo: '',\n                    uniqueNo: i\n                })\n            }\n            this.setState({ parkingData: parkingData }, () => {\n            });\n        } else {\n            this.setState({ parkingData: this.props.parkingData });\n        }\n    }\n\n    componentWillUnmount = () => {\n\n    }\n\n\n\n    carRegistration = () => {\n        if (this.state.carRegistrationNo.trim().length === 0) {\n            const notify = () => toast(\"Car Registration No is empty\");\n            notify();\n            return;\n        }\n        let availableParkingArea = this.state.parkingData;\n        let availableRegistrationIndex = availableParkingArea.findIndex((item: any) => item.carRegistrationNo.toLowerCase() === this.state.carRegistrationNo.toLowerCase());\n        if(availableRegistrationIndex !== -1) {\n            const notify = () => toast(\"Already Car Registered with this No.\");\n            notify();\n            return;\n        }\n        let availableIndex = availableParkingArea.findIndex((item: any) => item.isAvailable === true);\n        if (availableIndex === -1) {\n            const notify = () => toast(\"Parking is full !\");\n            notify();\n            return;\n        }\n\n        let availableIndexes: any = [];\n        availableParkingArea.map((item: any, index: any) => {\n            if (item.isAvailable) {\n                availableIndexes.push(index);\n            }\n        });\n\n        let randomIndex = Math.floor((Math.random() * availableIndexes.length));\n        availableParkingArea[availableIndexes[randomIndex]].isAvailable = false;\n        availableParkingArea[availableIndexes[randomIndex]].carRegistrationNo = this.state.carRegistrationNo;\n         availableParkingArea[availableIndexes[randomIndex]].time = new Date().getTime();\n       \n        this.setState({ parkingData: availableParkingArea, carRegistrationNo: ''}, () => {\n            this.props.updateParkingData(JSON.parse(JSON.stringify(this.state.parkingData)));\n            const notify = () => toast(\"Car Registered Succesfully !\");\n            notify();\n        });\n    }\n\n\n\n    handleChangeTextInput = (event: any) => {\n        event?.preventDefault();\n        this.setState({ carRegistrationNo: event.target.value });\n    }\n\n\n    onPressSlot = (item: any) => {\n        this.props.navigate(`/parkingCharges`, { state: { slotData: item }});\n    }\n\n    renderSlotsList = () => {\n        return (\n            <div>\n            <Grid  container style = {{padding : \"3%\", gap : \"20px\"}} direction= \"row\" justifyContent=\"center\" alignItems=\"center\">\n                {this.state.parkingData.map((item: any, index: any) => {\n                    return (\n                        <Box \n               style={{lineHeight: \"50px\", textAlign: \"center\", border : \"1px solid black\", backgroundColor: item.isAvailable ? \"grey\" : \"green\"  ,color:\"#000\", margin: \"0px 15px\"}}\n               sx={{\n                 width: 50,\n                 height: 50,\n               }}\n               data-testid=\"parking-drawing-{item.isAvailable === false ? space-{item.uniqueNo + 1} : registered-{item.uniqueNo + 1}}\"\n               onClick={() => !item.isAvailable && this.onPressSlot(item)} key={index}\n               >\n                <div id = \"parking-drawing-space-number-{item.uniqueNo + 1}\">  {item.uniqueNo + 1}</div>\n               \n                 </Box>\n                    )\n                })}\n            </Grid>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <Grid container style = {{padding : \"3%\", gap : \"40px\"}} direction= \"column\" justifyContent=\"center\" alignItems=\"center\">\n                {this.renderSlotsList()}\n                <TextField autoComplete='off' data-testid=\"parking-drawing-registration-input\"  placeholder='Enter Car Registration No'  value={this.state.carRegistrationNo} onChange={(event) => this.handleChangeTextInput(event)} />\n                <Button variant =\"contained\" color=\"primary\" data-testid=\"parking-drawing-add-car-button\" onClick={() => this.carRegistration()} >Car Register</Button>\n                <ToastContainer toastStyle={{ backgroundColor: \"#283044\" , color : \"#fff\" }}/>\n            </Grid>\n        )\n    }\n};\n\n\n\n\nconst mapStateToProps = (state: any) => ({\n    parkingData: state.parking.parkingData\n});\n\nconst mapDispatchToProps = {\n    updateParkingData: updateParkingData\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WithRouter(ParkingSlots));\nexport {ParkingSlots};"],"mappings":"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"},"metadata":{},"sourceType":"module"}